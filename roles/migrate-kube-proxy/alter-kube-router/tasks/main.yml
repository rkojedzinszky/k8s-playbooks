---
- name: query existing kube-router ds
  command: kubectl -n kube-system get ds kube-router -o yaml
  register: ds_kube_router

- name: update kube-router ds
  when: "'--run-service-proxy=true' not in (ds_kube_router.stdout|from_yaml)['spec']['template']['spec']['containers'][0]['args']"
  block:
    - name: Fetch upstream kube-router ds manifest
      uri:
        url: https://raw.githubusercontent.com/cloudnativelabs/kube-router/master/daemonset/kubeadm-kuberouter-all-features.yaml
        return_content: true
      register: upstream_ds_kube_router

    - name: Parse upstream kube-router ds
      set_fact:
        upstream_ds_kube_router: |
          {%- for p in upstream_ds_kube_router.content | split("---\n") | map('from_yaml') %}
            {%- if p['kind'] == 'DaemonSet' %}
              {{- p -}}
            {%- endif %}
          {%- endfor -%}

    - name: Update kube-router ds from upstream
      set_fact:
        kube_router_ds: |
          {%- set config = ds_kube_router.stdout|from_yaml -%}
          {%- set args = [] %}
          {%- for a in config['spec']['template']['spec']['containers'][0]['args'] %}
            {%- set _ = args.append('--run-service-proxy=true' if a == '--run-service-proxy=false' else a) %}
          {%- endfor %}
          {%- if '--run-service-proxy=true' not in args %}
            {%- set _ = args.append('--run-service-proxy=true') %}
          {%- endif %}
          {%- set _ = args.append('--kubeconfig=/var/lib/kube-router/kubeconfig') %}

          {%- set image = config['spec']['template']['spec']['containers'][0]['image'] %}
          {%- set _ = config['spec']['template']['spec'].update({'containers': upstream_ds_kube_router['spec']['template']['spec']['containers']}) %}
          {%- set _ = config['spec']['template']['spec']['containers'][0].update({'args': args, 'image': image}) %}
          {%- set _ = config['spec']['template']['spec']['containers'][0].pop('imagePullPolicy', None) %}
          {%- set _ = config['spec']['template']['spec'].update({'initContainers': upstream_ds_kube_router['spec']['template']['spec']['initContainers']}) %}
          {%- set _ = config['spec']['template']['spec']['initContainers'][0].update({'image': image}) %}
          {%- set _ = config['spec']['template']['spec']['initContainers'][0].pop('imagePullPolicy', None) %}
          {%- set volumes = upstream_ds_kube_router['spec']['template']['spec']['volumes'] -%}
          {%- for v in volumes -%}
            {%- if v['configMap']['name'] is defined and v['configMap']['name'] == 'kube-proxy' -%}
              {%- set _ = v['configMap'].update({'name': 'kube-router-kubeconfig'}) -%}
            {%- endif -%}
          {%- endfor -%}
          {%- set _ = config['spec']['template']['spec'].update({'volumes': volumes}) %}

          {%- set _ = config['metadata']['annotations'].update({'updateStrategyType':config['spec']['updateStrategy']['type']}) %}
          {%- set _ = config['spec']['updateStrategy'].update({'type': 'OnDelete'}) %}

          {{- config }}

    - name: update kube-router daemonset
      command:
        cmd: kubectl apply -f -
        stdin: "{{ kube_router_ds | to_yaml }}"
